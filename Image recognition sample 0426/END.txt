
from tkinter import *
import cv2
import imutils
import os,dlib,glob,numpy
from skimage import io
from PIL import ImageTk, Image
import threading

root = Tk()
 
Label(root, text="帳號").grid(row=0, sticky=W)
Label(root, text="密碼").grid(row=1, sticky=W)
 
user = Entry(root)
user.grid(row=0, column=1)

passwd = Entry(root, show="*")
passwd.grid(row=1, column=1)
 
photo = PhotoImage(file="account.png")
photo1 = PhotoImage(file="alvin.png")
photo2 = PhotoImage(file="tom.png")
photo3 = PhotoImage(file="john.png")

showPhoto = Label(root, image=photo)
showPhoto.grid(row=0, column=2, rowspan=2, padx=5, pady=5)

showVideoPhoto = Label(root, image=photo)
showVideoPhoto.grid_forget()

loginMethod = 0

# 人臉68特徵點模型路徑
predictor_path = "shape_predictor_68_face_landmarks.dat"

# 人臉辨識模型路徑
face_rec_model_path = "dlib_face_recognition_resnet_model_v1.dat"

# 比對人臉圖片資料夾名稱
faces_folder_path = "./rec"

# 需要辨識的人臉圖片名稱
#img_path = sys.argv[ 1]

# 載入人臉檢測器
detector = dlib.get_frontal_face_detector()

# 載入人臉特徵點檢測器
sp = dlib.shape_predictor(predictor_path)

# 載入人臉辨識檢測器
facerec = dlib.face_recognition_model_v1(face_rec_model_path)

# 比對人臉描述子列表
descriptors = []

# 比對人臉名稱列表
candidate = []

# 針對比對資料夾裡每張圖片做比對:
# 1.人臉偵測
# 2.特徵點偵測
# 3.取得描述子
  
for f in glob.glob(os.path.join(faces_folder_path, "*.jpg")):
    base = os.path.basename(f)
    # 依序取得圖片檔案人名
    candidate.append(os.path.splitext(base)[ 0])
    img = io.imread(f)

    # 1.人臉偵測
    dets = detector(img, 1)

    for k, d in enumerate(dets):
        # 2.特徵點偵測
        shape = sp(img, d)
 
        # 3.取得描述子，128維特徵向量
        face_descriptor = facerec.compute_face_descriptor(img, shape)

        # 轉換numpy array格式
        v = numpy.array(face_descriptor)
        descriptors.append(v)

def faceRecog(frame):
    dets = detector(frame, 1)
    
    dist = []
    for k, d in enumerate(dets):
        dist=[]
        shape = sp(frame, d)
        face_descriptor = facerec.compute_face_descriptor(frame, shape)
        d_test = numpy.array(face_descriptor)
    
        # 計算歐式距離
        for i in descriptors:
            dist_ = numpy.linalg.norm(i -d_test)
            dist.append(dist_)
    
        # 將比對人名和比對出來的歐式距離組成一個dict
        c_d = dict(zip(candidate,dist))
    
        # 根據歐式距離由小到大排序
        cd_sorted = sorted(c_d.items(), key = lambda d:d[1])
        print(cd_sorted)
        if cd_sorted[0][1]<0.5:
            # 取得最短距離就為辨識出的人名
            rec_name = cd_sorted[0][0]
        if rec_name=="alvin":
            user.delete(0, END)
            user.insert(0, "alvin")
            showPhoto.configure(image=photo1)
        elif rec_name=="mary":
            user.delete(0, END)
            user.insert(0, "mary")
            showPhoto.configure(image=photo2)
        elif rec_name=="beckhan":
            user.delete(0, END)
            user.insert(0, "beckhan")
            showPhoto.configure(image=photo3)

def video_stream():
    
    global loginMethod
    if loginMethod==0:
        return
    
    
    _, pic = cam.read()
    frame = pic.copy()
    cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)
    img = Image.fromarray(cv2image)
    imgtk = ImageTk.PhotoImage(image=img)
    showVideoPhoto.imgtk = imgtk
    showVideoPhoto.configure(image=imgtk)
    showVideoPhoto.after(1, video_stream)
    
    t=threading.Thread(target = faceRecog, args=(frame,))
    t.start()
    

def signIn():
    if user.get()=="alvin":
        if passwd.get()=="123456":
            showPhoto.configure(image=photo1)
        else:
            messagebox.showinfo(title='登入錯誤', message='密碼有誤')              # 提示資訊對話窗
    elif user.get()=="mary":
        if passwd.get()=="654321":
            showPhoto.configure(image=photo2)
        else:
            messagebox.showinfo(title='登入錯誤', message='密碼有誤')   
    else:
        messagebox.showinfo(title='登入錯誤', message='無此帳號')              # 提示資訊對話窗

def signUp():
    pass

def videoSignIn():
    global loginMethod
    if loginMethod == 0:
        loginMethod = 1
        video_stream()
        showVideoPhoto.grid()
    else:
        loginMethod = 0
        showVideoPhoto.grid_forget()
        
 
Button(text="登入", width=10, command=signIn).grid(row=2, columnspan=3, pady=5)
Button(text="註冊", width=10, command=signUp).grid(row=3, columnspan=6, pady=5)
Button(text="影像辨識", width=10, command=videoSignIn).grid(row=4, columnspan=6, pady=5)
cam = cv2.VideoCapture(0)



mainloop()

